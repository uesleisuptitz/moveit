{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/uesleisuptitz/projetos/nlw4/moveit/src/context/countdown.context.tsx\";\nimport { useState, useContext, useEffect } from \"react\";\nimport { createContext } from \"react\";\nimport { ChallengesContext } from \"./challenges.context\";\nlet timeout;\nexport const CountdownContext = /*#__PURE__*/createContext({});\nexport const CountdownProvider = ({\n  children\n}) => {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(5);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: isCompleted,\n    1: setIsCompleted\n  } = useState(false);\n  useEffect(() => {\n    if (isActive && time > 0) timeout = setTimeout(() => setTime(time - 1), 1000);else if (isActive && time === 0) {\n      setIsActive(false);\n      setIsCompleted(true);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n\n  const resetCountdown = () => {\n    setIsActive(false);\n    clearTimeout(timeout);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: Math.floor(time / 60),\n      seconds: time % 60,\n      isCompleted,\n      isActive,\n      startCountdown: () => setIsActive(true),\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/uesleisuptitz/projetos/nlw4/moveit/src/context/countdown.context.tsx"],"names":["useState","useContext","useEffect","createContext","ChallengesContext","timeout","CountdownContext","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","isCompleted","setIsCompleted","setTimeout","resetCountdown","clearTimeout","minutes","Math","floor","seconds","startCountdown"],"mappings":";;AAAA,SAASA,QAAT,EAA8BC,UAA9B,EAA0CC,SAA1C,QAA2D,OAA3D;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAeA,IAAIC,OAAJ;AAEA,OAAO,MAAMC,gBAAgB,gBAAGH,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,MAAMI,iBAAiB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA0C;AACzE,QAAM;AAAEC,IAAAA;AAAF,MAAwBR,UAAU,CAACG,iBAAD,CAAxC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBX,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM;AAAA,OAACY,QAAD;AAAA,OAAWC;AAAX,MAA0Bb,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACc,WAAD;AAAA,OAAcC;AAAd,MAAgCf,QAAQ,CAAC,KAAD,CAA9C;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EACEL,OAAO,GAAGW,UAAU,CAAC,MAAML,OAAO,CAACD,IAAI,GAAG,CAAR,CAAd,EAA0B,IAA1B,CAApB,CADF,KAEK,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AAC/BG,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAN,MAAAA,iBAAiB;AAClB;AACF,GARQ,EAQN,CAACG,QAAD,EAAWF,IAAX,CARM,CAAT;;AAUA,QAAMO,cAAc,GAAG,MAAM;AAC3BJ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAK,IAAAA,YAAY,CAACb,OAAD,CAAZ;AACD,GAHD;;AAKA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLc,MAAAA,OAAO,EAAEC,IAAI,CAACC,KAAL,CAAWX,IAAI,GAAG,EAAlB,CADJ;AAELY,MAAAA,OAAO,EAAEZ,IAAI,GAAG,EAFX;AAGLI,MAAAA,WAHK;AAILF,MAAAA,QAJK;AAKLW,MAAAA,cAAc,EAAE,MAAMV,WAAW,CAAC,IAAD,CAL5B;AAMLI,MAAAA;AANK,KADT;AAAA,cAUGT;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CApCM","sourcesContent":["import { useState, ReactNode, useContext, useEffect } from \"react\";\nimport { createContext } from \"react\";\nimport { ChallengesContext } from \"./challenges.context\";\n\ninterface CountdownProviderProps {\n  children: ReactNode;\n}\n\ninterface CountdownContextData {\n  minutes: number;\n  seconds: number;\n  isCompleted: boolean;\n  isActive: boolean;\n  startCountdown: () => void;\n  resetCountdown: () => void;\n}\n\nlet timeout: NodeJS.Timeout;\n\nexport const CountdownContext = createContext({} as CountdownContextData);\n\nexport const CountdownProvider = ({ children }: CountdownProviderProps) => {\n  const { startNewChallenge } = useContext(ChallengesContext);\n\n  const [time, setTime] = useState(5);\n  const [isActive, setIsActive] = useState(false);\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  useEffect(() => {\n    if (isActive && time > 0)\n      timeout = setTimeout(() => setTime(time - 1), 1000);\n    else if (isActive && time === 0) {\n      setIsActive(false);\n      setIsCompleted(true);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n\n  const resetCountdown = () => {\n    setIsActive(false);\n    clearTimeout(timeout);\n  };\n\n  return (\n    <CountdownContext.Provider\n      value={{\n        minutes: Math.floor(time / 60),\n        seconds: time % 60,\n        isCompleted,\n        isActive,\n        startCountdown: () => setIsActive(true),\n        resetCountdown,\n      }}\n    >\n      {children}\n    </CountdownContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}