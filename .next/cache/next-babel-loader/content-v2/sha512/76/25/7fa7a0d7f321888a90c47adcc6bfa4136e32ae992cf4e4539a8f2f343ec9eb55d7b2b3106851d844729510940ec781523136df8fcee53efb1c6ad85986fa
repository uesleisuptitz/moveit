{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/uesleisuptitz/projetos/nlw4/moveit/src/context/countdown.context.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useEffect } from \"react\";\nimport { createContext } from \"react\";\nimport { ChallengesContext } from \"./challenges.context\";\nvar timeout;\nexport var CountdownContext = /*#__PURE__*/createContext({});\nexport var CountdownProvider = function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge;\n\n  var _useState = useState(5),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      isCompleted = _useState3[0],\n      setIsCompleted = _useState3[1];\n\n  useEffect(function () {\n    if (isActive && time > 0) timeout = setTimeout(function () {\n      return setTime(time - 1);\n    }, 1000);else if (isActive && time === 0) {\n      setIsActive(false);\n      setIsCompleted(true);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n\n  var resetCountdown = function resetCountdown() {\n    setIsActive(false);\n    clearTimeout(timeout);\n  };\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      isCompleted: isCompleted,\n      isActive: isActive,\n      startCountdown: function startCountdown() {\n        return setIsActive(true);\n      },\n      resetCountdown: resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CountdownProvider, \"h+J6XfQXUJiosg1LxsAHEJZRyUg=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["/Users/uesleisuptitz/projetos/nlw4/moveit/src/context/countdown.context.tsx"],"names":["useState","useContext","useEffect","createContext","ChallengesContext","timeout","CountdownContext","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","isCompleted","setIsCompleted","setTimeout","resetCountdown","clearTimeout","minutes","Math","floor","seconds","startCountdown"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAA8BC,UAA9B,EAA0CC,SAA1C,QAA2D,OAA3D;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAeA,IAAIC,OAAJ;AAEA,OAAO,IAAMC,gBAAgB,gBAAGH,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,OAA0C;AAAA;;AAAA,MAAvCC,QAAuC,QAAvCA,QAAuC;;AAAA,oBAC3CP,UAAU,CAACG,iBAAD,CADiC;AAAA,MACjEK,iBADiE,eACjEA,iBADiE;;AAAA,kBAGjDT,QAAQ,CAAC,CAAD,CAHyC;AAAA,MAGlEU,IAHkE;AAAA,MAG5DC,OAH4D;;AAAA,mBAIzCX,QAAQ,CAAC,KAAD,CAJiC;AAAA,MAIlEY,QAJkE;AAAA,MAIxDC,WAJwD;;AAAA,mBAKnCb,QAAQ,CAAC,KAAD,CAL2B;AAAA,MAKlEc,WALkE;AAAA,MAKrDC,cALqD;;AAOzEb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EACEL,OAAO,GAAGW,UAAU,CAAC;AAAA,aAAML,OAAO,CAACD,IAAI,GAAG,CAAR,CAAb;AAAA,KAAD,EAA0B,IAA1B,CAApB,CADF,KAEK,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AAC/BG,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAN,MAAAA,iBAAiB;AAClB;AACF,GARQ,EAQN,CAACG,QAAD,EAAWF,IAAX,CARM,CAAT;;AAUA,MAAMO,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BJ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAK,IAAAA,YAAY,CAACb,OAAD,CAAZ;AACD,GAHD;;AAIA,MAAMc,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWX,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMY,OAAO,GAAGZ,IAAI,GAAG,EAAvB;AAEA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLS,MAAAA,OAAO,EAAPA,OADK;AAELG,MAAAA,OAAO,EAAPA,OAFK;AAGLR,MAAAA,WAAW,EAAXA,WAHK;AAILF,MAAAA,QAAQ,EAARA,QAJK;AAKLW,MAAAA,cAAc,EAAE;AAAA,eAAMV,WAAW,CAAC,IAAD,CAAjB;AAAA,OALX;AAMLI,MAAAA,cAAc,EAAdA;AANK,KADT;AAAA,cAUGT;AAVH;AAAA;AAAA;AAAA;AAAA,WADF;AAcD,CAtCM;;GAAMD,iB;;KAAAA,iB","sourcesContent":["import { useState, ReactNode, useContext, useEffect } from \"react\";\nimport { createContext } from \"react\";\nimport { ChallengesContext } from \"./challenges.context\";\n\ninterface CountdownProviderProps {\n  children: ReactNode;\n}\n\ninterface CountdownContextData {\n  minutes: number;\n  seconds: number;\n  isCompleted: boolean;\n  isActive: boolean;\n  startCountdown: () => void;\n  resetCountdown: () => void;\n}\n\nlet timeout: NodeJS.Timeout;\n\nexport const CountdownContext = createContext({} as CountdownContextData);\n\nexport const CountdownProvider = ({ children }: CountdownProviderProps) => {\n  const { startNewChallenge } = useContext(ChallengesContext);\n\n  const [time, setTime] = useState(5);\n  const [isActive, setIsActive] = useState(false);\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  useEffect(() => {\n    if (isActive && time > 0)\n      timeout = setTimeout(() => setTime(time - 1), 1000);\n    else if (isActive && time === 0) {\n      setIsActive(false);\n      setIsCompleted(true);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n\n  const resetCountdown = () => {\n    setIsActive(false);\n    clearTimeout(timeout);\n  };\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  return (\n    <CountdownContext.Provider\n      value={{\n        minutes,\n        seconds,\n        isCompleted,\n        isActive,\n        startCountdown: () => setIsActive(true),\n        resetCountdown,\n      }}\n    >\n      {children}\n    </CountdownContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}