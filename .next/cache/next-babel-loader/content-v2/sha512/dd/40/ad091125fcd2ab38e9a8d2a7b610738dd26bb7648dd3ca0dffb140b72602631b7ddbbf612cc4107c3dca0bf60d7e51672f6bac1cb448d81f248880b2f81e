{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/uesleisuptitz/projetos/nlw4/moveit/src/context/challenges.context.tsx\";\nimport { useState } from \"react\";\nimport { createContext } from \"react\";\nimport challenges from \"../challenges.json\";\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport const ChallengesProvider = ({\n  children\n}) => {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: experience,\n    1: setExperience\n  } = useState(0);\n  const {\n    0: challengesCompleteds,\n    1: setChallengesCompleteds\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n\n  const startNewChallenge = () => {\n    let newChallenge = challenges[Math.floor(Math.random() * challenges.length)];\n    setActiveChallenge(newChallenge);\n  };\n\n  const resetChallenge = () => {\n    setActiveChallenge(null);\n  };\n\n  const experienceToLevelUp = Math.pow((level + 1) * 4, 2);\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      experience,\n      activeChallenge,\n      challengesCompleteds,\n      levelUp: () => setLevel(level + 1),\n      startNewChallenge,\n      resetChallenge,\n      experienceToLevelUp\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/uesleisuptitz/projetos/nlw4/moveit/src/context/challenges.context.tsx"],"names":["useState","createContext","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","experience","setExperience","challengesCompleteds","setChallengesCompleteds","activeChallenge","setActiveChallenge","startNewChallenge","newChallenge","Math","floor","random","length","resetChallenge","experienceToLevelUp","pow","levelUp"],"mappings":";;AAAA,SAASA,QAAT,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AAqBA,OAAO,MAAMC,iBAAiB,gBAAGF,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,MAAMG,kBAAkB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA2C;AAC3E,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACQ,UAAD;AAAA,OAAaC;AAAb,MAA8BT,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM;AAAA,OAACU,oBAAD;AAAA,OAAuBC;AAAvB,MAAkDX,QAAQ,CAAC,CAAD,CAAhE;AACA,QAAM;AAAA,OAACY,eAAD;AAAA,OAAkBC;AAAlB,MAAwCb,QAAQ,CAAC,IAAD,CAAtD;;AAEA,QAAMc,iBAAiB,GAAG,MAAM;AAC9B,QAAIC,YAAY,GACdb,UAAU,CAACc,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBhB,UAAU,CAACiB,MAAtC,CAAD,CADZ;AAEAN,IAAAA,kBAAkB,CAACE,YAAD,CAAlB;AACD,GAJD;;AAMA,QAAMK,cAAc,GAAG,MAAM;AAC3BP,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GAFD;;AAIA,QAAMQ,mBAAmB,GAAGL,IAAI,CAACM,GAAL,CAAS,CAAChB,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA5B;AAEA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLA,MAAAA,KADK;AAELE,MAAAA,UAFK;AAGLI,MAAAA,eAHK;AAILF,MAAAA,oBAJK;AAKLa,MAAAA,OAAO,EAAE,MAAMhB,QAAQ,CAACD,KAAK,GAAG,CAAT,CALlB;AAMLQ,MAAAA,iBANK;AAOLM,MAAAA,cAPK;AAQLC,MAAAA;AARK,KADT;AAAA,cAYGhB;AAZH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAlCM","sourcesContent":["import { useState, ReactNode } from \"react\";\nimport { createContext } from \"react\";\nimport challenges from \"../challenges.json\";\n\ninterface ChallengesProviderProps {\n  children: ReactNode;\n}\ninterface Challenge {\n  type: \"body\" | \"eye\";\n  description: string;\n  amount: number;\n}\ninterface ChallengesContextData {\n  level: number;\n  experience: number;\n  activeChallenge: Challenge;\n  challengesCompleteds: number;\n  levelUp: () => void;\n  startNewChallenge: () => void;\n  resetChallenge: () => void;\n  experienceToLevelUp: number;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\nexport const ChallengesProvider = ({ children }: ChallengesProviderProps) => {\n  const [level, setLevel] = useState(1);\n  const [experience, setExperience] = useState(0);\n  const [challengesCompleteds, setChallengesCompleteds] = useState(0);\n  const [activeChallenge, setActiveChallenge] = useState(null);\n\n  const startNewChallenge = () => {\n    let newChallenge =\n      challenges[Math.floor(Math.random() * challenges.length)];\n    setActiveChallenge(newChallenge);\n  };\n\n  const resetChallenge = () => {\n    setActiveChallenge(null);\n  };\n\n  const experienceToLevelUp = Math.pow((level + 1) * 4, 2);\n\n  return (\n    <ChallengesContext.Provider\n      value={{\n        level,\n        experience,\n        activeChallenge,\n        challengesCompleteds,\n        levelUp: () => setLevel(level + 1),\n        startNewChallenge,\n        resetChallenge,\n        experienceToLevelUp,\n      }}\n    >\n      {children}\n    </ChallengesContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}