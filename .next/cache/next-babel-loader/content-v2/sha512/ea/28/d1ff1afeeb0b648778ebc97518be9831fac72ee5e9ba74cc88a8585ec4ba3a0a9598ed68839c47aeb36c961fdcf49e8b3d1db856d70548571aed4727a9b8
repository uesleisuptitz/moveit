{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/uesleisuptitz/projetos/nlw4/moveit/src/components/countdown/countdown.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext } from \"react\";\nimport { ChallengesContext } from \"../../context/challenges.context\";\nimport styles from \"./countdown.module.css\";\nvar timeout;\nexport var Countdown = function Countdown() {\n  _s();\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge,\n      activeChallenge = _useContext.activeChallenge;\n\n  var _useState = useState(activeChallenge && activeChallenge.amount || 5),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      isCompleted = _useState3[0],\n      setIsCompleted = _useState3[1];\n\n  var minutes = String(Math.floor(time / 60)).padStart(2, \"0\").split(\"\");\n  var seconds = String(time % 60).padStart(2, \"0\").split(\"\");\n  useEffect(function () {\n    if (isActive && time > 0) timeout = setTimeout(function () {\n      return setTime(time - 1);\n    }, 1000);else if (isActive && time === 0) {\n      setIsActive(false);\n      setIsCompleted(true);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n\n  var resetTime = function resetTime() {\n    setIsActive(false);\n    clearTimeout(timeout);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minutes[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minutes[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: seconds[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: seconds[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isCompleted,\n      type: \"button\",\n      className: \"\".concat(styles.btnStart, \" \").concat(isActive && styles.btnStop),\n      onClick: function onClick() {\n        return isCompleted ? {} : !isActive ? setIsActive(!isActive) : resetTime();\n      },\n      children: isCompleted ? \"Ciclo encerrado!\" : !isActive ? \"Iniciar um ciclo\" : \"Abandonar ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Countdown, \"OfeVYydgvJIPQzKoco9qCM+qOHE=\");\n\n_c = Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["/Users/uesleisuptitz/projetos/nlw4/moveit/src/components/countdown/countdown.tsx"],"names":["useEffect","useState","useContext","ChallengesContext","styles","timeout","Countdown","startNewChallenge","activeChallenge","amount","time","setTime","isActive","setIsActive","isCompleted","setIsCompleted","minutes","String","Math","floor","padStart","split","seconds","setTimeout","resetTime","clearTimeout","container","btnStart","btnStop"],"mappings":"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","sourcesContent":["import { useEffect, useState, useContext } from \"react\";\nimport { ChallengesContext } from \"../../context/challenges.context\";\nimport styles from \"./countdown.module.css\";\n\nlet timeout: NodeJS.Timeout;\n\nexport const Countdown = () => {\n  const { startNewChallenge, activeChallenge } = useContext(ChallengesContext);\n\n  const [time, setTime] = useState(\n    (activeChallenge && activeChallenge.amount) || 5\n  );\n  const [isActive, setIsActive] = useState(false);\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  const minutes = String(Math.floor(time / 60))\n    .padStart(2, \"0\")\n    .split(\"\");\n  const seconds = String(time % 60)\n    .padStart(2, \"0\")\n    .split(\"\");\n\n  useEffect(() => {\n    if (isActive && time > 0)\n      timeout = setTimeout(() => setTime(time - 1), 1000);\n    else if (isActive && time === 0) {\n      setIsActive(false);\n      setIsCompleted(true);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n\n  const resetTime = () => {\n    setIsActive(false);\n    clearTimeout(timeout);\n  };\n\n  return (\n    <div>\n      <div className={styles.container}>\n        <div>\n          <span>{minutes[0]}</span>\n          <span>{minutes[1]}</span>\n        </div>\n        <span>:</span>\n        <div>\n          <span>{seconds[0]}</span>\n          <span>{seconds[1]}</span>\n        </div>\n      </div>\n\n      <button\n        disabled={isCompleted}\n        type=\"button\"\n        className={`${styles.btnStart} ${isActive && styles.btnStop}`}\n        onClick={() =>\n          isCompleted ? {} : !isActive ? setIsActive(!isActive) : resetTime()\n        }\n      >\n        {isCompleted\n          ? \"Ciclo encerrado!\"\n          : !isActive\n          ? \"Iniciar um ciclo\"\n          : \"Abandonar ciclo\"}\n      </button>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}